input SearchDonneeCriteria {
  id: Int
  observateurs: [Int!]
  temperature: Int
  meteos: [Int!]
  associes: [Int!]
  heure: String
  duree: String
  classes: [Int!]
  especes: [Int!]
  departements: [Int!]
  communes: [Int!]
  lieuxdits: [Int!]
  nombre: Int
  estimationsNombre: [Int!]
  sexes: [Int!]
  ages: [Int!]
  distance: Int
  estimationsDistance: [Int!]
  regroupement: Int
  fromDate: String
  toDate: String
  commentaire: String
  nicheurs: [Nicheur!]
  comportements: [Int!]
  milieux: [Int!]
}

enum Nicheur {
  possible
  probable
  certain
}

enum CoordinatesSystemType {
  gps
  lambert93
}

type Comportement {
  id: Int!
  code: String!
  libelle: String!
  nicheur: Nicheur
}

type Departement {
  id: Int!
  code: String!
}

type Observateur {
  id: Int!
  libelle: String!
}

type Classe {
  id: Int!
  libelle: String!
}

type Commune {
  id: Int!
  code: Int!
  nom: String!
  departement: Departement!
}

type Espece {
  id: Int!
  code: String!
  nomFrancais: String!
  nomLatin: String!
  classe: Classe!
  editable: Boolean
  nbDonnees: Int
}

type EstimationDistance {
  id: Int!
  libelle: String!
}

type EstimationNombre {
  id: Int!
  libelle: String!
  nonCompte: Boolean!
}

type Meteo {
  id: Int!
  libelle: String!
}

type LieuDit {
  id: Int!
  nom: String!
  altitude: Int!
  longitude: Float!
  latitude: Float!
  coordinatesSystem: CoordinatesSystemType!
  commune: Commune!
  editable: Boolean
  nbDonnees: Int
}

type Milieu {
  id: Int!
  code: String!
  libelle: String!
}

type Sexe {
  id: Int!
  libelle: String!
}

type Age {
  id: Int!
  libelle: String!
}

type Coordinates {
  altitude: Int!
  longitude: Float!
  latitude: Float!
  system: CoordinatesSystemType!
}

type Inventaire {
  id: Int!
  observateur: Observateur!
  associes: [Observateur!]!
  date: String!
  heure: String
  duree: String
  lieuDit: LieuDit!
  customizedCoordinates: Coordinates
  temperature: Int
  meteos: [Meteo!]!
}

type Donnee {
  id: Int!
  inventaire: Inventaire!
  espece: Espece!
  sexe: Sexe!
  age: Age!
  estimationNombre: EstimationNombre!
  nombre: Int
  estimationDistance: EstimationDistance
  distance: Int
  regroupement: Int
  comportements: [Comportement!]!
  milieux: [Milieu!]!
  commentaire: String
}

#
# Args
#
input SearchParams {
  q: String
  pageNumber: Int
  pageSize: Int
}

input SearchDonneeParams {
  pageNumber: Int
  pageSize: Int
}

enum SortOrder {
  asc
  desc
}

enum EspecesOrderBy {
  id
  code
  nomFrancais
  nomLatin
  nomClasse
  nbDonnees
}

enum LieuxDitsOrderBy {
  id
  nom
  altitude
  longitude
  latitude
  codeCommune
  nomCommune
  departement
  nbDonnees
}

enum SearchDonneesOrderBy {
  id
  codeEspece
  nomFrancais
  nombre
  sexe
  age
  departement
  codeCommune
  nomCommune
  lieuDit
  date
  heure
  duree
  observateur
}

#
# Results
#

interface PaginatedResult {
  count: Int!
}

type EspecesPaginatedResult implements PaginatedResult {
  data: [Espece!]
  count: Int!
}

type LieuxDitsPaginatedResult implements PaginatedResult {
  data: [LieuDit!]
  count: Int!
}

type PaginatedSearchDonneesResult implements PaginatedResult {
  result(
    searchCriteria: SearchDonneeCriteria
    searchParams: SearchDonneeParams
    orderBy: SearchDonneesOrderBy
    sortOrder: SortOrder
  ): [Donnee]
  count(searchCriteria: SearchDonneeCriteria): Int!
}

type Query {
  especes(
    searchParams: SearchParams
    searchCriteria: SearchDonneeCriteria
    orderBy: EspecesOrderBy
    sortOrder: SortOrder
  ): EspecesPaginatedResult
  lieuxDits(searchParams: SearchParams, townId: Int, orderBy: LieuxDitsOrderBy, sortOrder: SortOrder): LieuxDitsPaginatedResult
  searchDonnees: PaginatedSearchDonneesResult
}
