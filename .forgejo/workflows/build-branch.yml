name: Build, Test & Deploy

on:
  push:
    branches:
      - "*"

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: true

jobs:
  validate:
#     environment:
#       name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}

    runs-on: docker

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - uses: ./.forgejo/actions/validate

      # We had cases where the PR typecheck was fine, but the build failed
      # Let's make sure we don't deploy something that doesn't build
      # Also, reuse the built artifact for the deployment
      - uses: ./.forgejo/actions/build-frontend
        with:
          with-sentry: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          sentry-url: ${{ vars.SENTRY_URL }}
          sentry-auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          sentry-org: ${{ vars.SENTRY_ORG }}
          sentry-project: ${{ vars.SENTRY_PROJECT }}

#   deploy-cloudflare:
#     needs: validate

#     environment:
#       name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}
#       url: ${{ steps.deploy.outputs.deployment-url }}

#     permissions:
#       deployments: write

#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

#       - uses: ./.github/actions/deploy-cloudflare-pages
#         id: deploy
#         with:
#           artifact-name: dist-frontend
#           artifact-path: dist
#           cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
#           cloudflare-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
#           cloudflare-project-name: ${{ vars.CLOUDFLARE_PROJECT_NAME }}

  publish-backend-image:
    runs-on: docker

    outputs:
      image-label: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.docker_build.outputs.digest }}

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4
        id: setup-node
        with:
          node-version-file: .tool-versions

      - uses: https://github.com/docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        id: meta
        with:
          images: |
            ${{ secrets.FORGEJO_DOMAIN }}/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=sha
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=false

      # - uses: https://github.com/docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3

      # - uses: https://github.com/docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3
      #   id: buildx

      - uses: https://github.com/redhat-actions/podman-login@v1
        with:
          registry: ${{ secrets.FORGEJO_DOMAIN }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Rewrite Node version for Docker
      #   id: rewrite-node-version
      #   run: |
      #     echo "NODE_IMAGE_VERSION=$(echo '${{ steps.setup-node.outputs.node-version }}' | cut -c2- )" >> $GITHUB_ENV

#       - name: Build and push to GitHub Container Registry
#         id: docker_build
#         uses: https://github.com/docker/build-push-action@16ebe778df0e7752d2cfcbd924afdbbd89c1a755 # v6
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           build-args: |
#             "NODE_IMAGE_VERSION=${{ env.NODE_IMAGE_VERSION }}"
#             "GIT_SHA=${{ github.sha }}"
#           context: .
#           platforms: |
#             linux/amd64
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#   trigger-dispatch-release:
#     environment:
#       name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}

#     needs: [validate, publish-backend-image]
#     concurrency: deploy-backend-${{ github.ref }}

#     runs-on: ubuntu-latest

#     steps:
#       - name: Dispatch backend image update to forgejo
#         run: >
#           curl --silent --show-error --fail
#           -H 'accept: application/json'
#           -H 'Authorization: token ${{ secrets.FORGEJO_TOKEN }}'
#           -H 'Content-Type: application/json'
#           --data '{"inputs": {"label": "${{ needs.publish-backend-image.outputs.image-label }}", "digest": "${{ needs.publish-backend-image.outputs.image-digest }}", "isProduction": "${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}" },"ref":"main"}'
#           ${{ secrets.FORGEJO_URL }}/api/v1/repos/${{ secrets.FORGEJO_OWNER }}/${{ secrets.FORGEJO_REPO }}/actions/workflows/${{ secrets.FORGEJO_WORKFLOW }}/dispatches
