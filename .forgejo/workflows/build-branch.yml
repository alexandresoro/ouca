name: Build, Test & Deploy

on:
  push:
    branches:
      - "*"

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: true

jobs:
  validate:
#     environment:
#       name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}

    runs-on: docker

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: ./.forgejo/actions/validate

      # We had cases where the PR typecheck was fine, but the build failed
      # Let's make sure we don't deploy something that doesn't build
      # Also, reuse the built artifact for the deployment
      - uses: ./.forgejo/actions/build-frontend
        with:
          with-sentry: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          sentry-url: ${{ vars.SENTRY_URL }}
          sentry-auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          sentry-org: ${{ vars.SENTRY_ORG }}
          sentry-project: ${{ vars.SENTRY_PROJECT }}

  deploy-cloudflare:
    needs: validate

#     environment:
#       name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}
#       url: ${{ steps.deploy.outputs.deployment-url }}

#     permissions:
#       deployments: write

    runs-on: docker

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: ./.forgejo/actions/deploy-cloudflare-pages
        with:
          artifact-name: dist-frontend
          artifact-path: dist
          cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare-project-name: ${{ vars.CLOUDFLARE_PROJECT_NAME }}

  publish-backend-image:
    runs-on: docker

    container:
      image: node:20-bookworm@sha256:f4755c9039bdeec5c736b2e0dd5b47700d6393b65688b9e9f807ec12f54a8690
      options: "--privileged --security-opt seccomp=unconfined"

    outputs:
      image-label: ${{ steps.docker-metadata.outputs.version }}
      image-digest: ${{ steps.push-image.outputs.digest }}

    steps:
      - run: apt update && apt install -y podman

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4
        id: setup-node
        with:
          node-version-file: .tool-versions

      - uses: https://github.com/docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        id: docker-metadata
        with:
          images: |
            ${{ secrets.FORGEJO_DOMAIN }}/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=sha
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=false

      - name: Rewrite Node version for Docker
        id: rewrite-node-version
        run: |
          echo "NODE_IMAGE_VERSION=$(echo '${{ steps.setup-node.outputs.node-version }}' | cut -c2- )" >> $GITHUB_ENV

      - uses: https://github.com/redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        id: build-image
        with:
          layers: false
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          build-args: |
            NODE_IMAGE_VERSION=${{ env.NODE_IMAGE_VERSION }}
            GIT_SHA=${{ github.sha }}
          containerfiles: |
            ./Dockerfile
          # Disable caching as it's slower than building from scratch
          # extra-args: |
          #   --cache-from ${{ secrets.FORGEJO_DOMAIN }}/alexandresoro/cache
          #   --cache-to ${{ secrets.FORGEJO_DOMAIN }}/alexandresoro/cache

      - uses: https://github.com/redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        id: push-image
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ secrets.FORGEJO_DOMAIN }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

  trigger-dispatch-release:
    # environment:
    #   name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && 'production' || 'preview' }}

    needs: [validate, publish-backend-image]
    # concurrency: deploy-backend-${{ github.ref }}

    runs-on: docker

    steps:

      - name: Dispatch backend image update to forgejo
        run: >
          curl --silent --show-error --fail
          -H 'accept: application/json'
          -H 'Authorization: token ${{ secrets.FORGEJO_TOKEN }}'
          -H 'Content-Type: application/json'
          --data '{"inputs": {"label": "${{ needs.publish-backend-image.outputs.image-label }}", "digest": "${{ needs.publish-backend-image.outputs.image-digest }}", "isProduction": "${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}" },"ref":"main"}'
          https://${{ secrets.FORGEJO_DOMAIN }}/api/v1/repos/${{ secrets.FORJEGO_K8S_REPO }}/actions/workflows/${{ secrets.FORGEJO_K8S_REPO_WORKFLOW }}/dispatches
